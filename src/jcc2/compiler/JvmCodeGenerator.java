
package jcc2.compiler;

import java.io.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import jcc2.common.ClassContainer;
import jcc2.common.FieldContainer;
import jcc2.common.MethodContainer;
import jcc2.common.Type;
import jcc2.lib.Library;

/**
 *
 * @author note173@gmail.com
 */

public class JvmCodeGenerator extends CodeGenerator
{
    boolean bFakeMode;
    Vector vFakeModeStack;

    ByteArrayOutputStream bosHeader;
    DataOutputStream osHeader;
    DataOutputStream osCur;

    MethodContainer initMethod;
    MethodContainer curMethod;

    int nextLabel;

    String className;

    public JvmCodeGenerator () throws IOException
    {
        className = "main";

        bFakeMode = false;
        vFakeModeStack = new Vector ();

        bosHeader = new ByteArrayOutputStream ();
        osHeader = new DataOutputStream (bosHeader);
        osCur = osHeader;
        nextLabel = 0;

        initMethod = new MethodContainer ("<init>", Type.TYPE_VOID, new Type[0]);

        emitln(".class public " + className);
        emitln(".super jcc2/midlet/Midlet");
        emitln(".implements jcc2/lib/RTCallbackCaller\n");

        setCurrentMethod(initMethod);

        emitln("aload_0");
        emitln("invokenonvirtual jcc2/midlet/Midlet/<init>()V");
    }

    public void setInitMethod ()
    {
        setCurrentMethod (initMethod);
    }

    public void setCurrentMethod (MethodContainer method)
    {
        curMethod = method;
        osCur = method.os;
    }

    public void link (DataOutputStream os, ClassContainer mainClass, SymLocator locator) throws IOException
    {
        osCur = os;
        
        emit("; Assembly generated by Jcc2 Reloaded compiler v0.1b\n\n");

        // header
        bosHeader.close();
        byte[] buf;
        buf = bosHeader.toByteArray();
        os.write(buf);

        // fields
        for (Enumeration en = mainClass.getFields(); en.hasMoreElements(); )
        {
            FieldContainer field = (FieldContainer)en.nextElement();
            emit(".field public ");
            emit(field.name);
            emit(" ");
            emit(Type.genSpec(field.type));
            emit("\n");
        }
        
        emit("\n");

        // methods
        MethodContainer method = initMethod;
        
        emit(".method public ");
        emit(method.fullSpec);
        emit ("\n");
        emit(".limit locals " + method.nextId);
        emit ("\n");
        emit(".limit stack 12");
        emit ("\n");
        buf = method.getCode();
        os.write(buf);
        emit("return\n");
        emit(".end method\n");
        emit ("\n");
        Vector vCallback = new Vector ();
        for (Enumeration en = mainClass.getMethods(); en.hasMoreElements(); )
        {
            method = (MethodContainer)en.nextElement();
            if (method.bCallback)
            {
                if (vCallback.size() == 0)
                    vCallback.addElement(method);
                else
                {
                    int place = 0;
                    for (int i = 0; i < vCallback.size(); i++)
                    {
                        if (method.id >= ((MethodContainer)vCallback.elementAt(i)).id)
                            place++;
                        else
                            break;
                    }
                    vCallback.insertElementAt(method, place);
                }
            }
            emit(".method public ");
            emit(method.fullSpec);
            emit ("\n");
            emit(".limit locals " + method.nextId);
            emit ("\n");
            emit(".limit stack 12");
            emit ("\n");
            buf = method.getCode();
            os.write(buf);
            emit(".end method");
            emit ("\n\n");
        }

        //add callback caller
        if (vCallback.size() != 0)
        {
            emitln (".method public $callCallback([Ljava/lang/Object;I)V");
            emit(".limit stack 10\n");
            emit(".limit locals 3\n");
            emitln ("iload_2");
            emitln ("lookupswitch");
            for (Enumeration en = vCallback.elements(); en.hasMoreElements(); )
            {
                MethodContainer methodCallback = (MethodContainer)en.nextElement();
                emitln ("" + methodCallback.id + ": mth" + methodCallback.id);
            }
            emitln ("default: end");
            for (Enumeration en = vCallback.elements(); en.hasMoreElements(); )
            {
                MethodContainer methodCallback = (MethodContainer)en.nextElement();
                emitln ("mth" + methodCallback.id + ":");
                emitln ("aload_0");
                for (int i = 0; i < methodCallback.args.length; i++)
                {
                    emitln ("aload_1");
                    pushInt (i);
                    Type tArg = methodCallback.args[i];
                    if (tArg.equals(Type.TYPE_BYTE) || tArg.equals(Type.TYPE_BOOL))
                    {
                        aaload ();
                        emitln ("checkcast [B");
                        pushInt(0);
                        baload();
                    }
                    else if (tArg.equals(Type.TYPE_CHAR))
                    {
                        aaload ();
                        emitln ("checkcast [C");
                        pushInt(0);
                        caload();
                    }
                    else if (tArg.equals(Type.TYPE_SHORT))
                    {
                        aaload ();
                        emitln ("checkcast [S");
                        pushInt(0);
                        saload();
                    }
                    else if (tArg.equals(Type.TYPE_INT))
                    {
                        aaload ();
                        emitln ("checkcast [I");
                        pushInt(0);
                        iaload();
                    }
                    else if (tArg.equals(Type.TYPE_LONG))
                    {
                        aaload ();
                        emitln ("checkcast [J");
                        pushInt(0);
                        laload();
                    }
                    else if (tArg.equals(Type.TYPE_FLOAT))
                    {
                        aaload ();
                        emitln ("checkcast [F");
                        pushInt(0);
                        faload();
                    }
                    else if (tArg.equals(Type.TYPE_DOUBLE))
                    {
                        aaload ();
                        emitln ("checkcast [D");
                        pushInt(0);
                        daload();
                    }
                    else
                    {
                        aaload();
                        if (tArg.object != null)
                            emitln ("checkcast " + tArg.object.className);
                        else if (tArg.equals(Type.TYPE_STRING))
                            emitln ("checkcast " + "java/lang/String");
                    }
                }
                emitln ("invokevirtual " + className + "/" + methodCallback.fullSpec);
                emitln ("return");
            }
            emitln ("end:\nreturn");
            emitln (".end method\n");
        }

        // add main method for j2se
        emit(".method public static main([Ljava/lang/String;)V\n");
        emit(".limit stack 2\n");
        emit(".limit locals 2\n");
        emit("new " + className + "\n");
        emit("dup\n");
        emit("astore_1\n");
        emit("invokenonvirtual " + className + "/<init>()V\n");
        emit("aload_1\n");
        emit("invokevirtual " + className + "/main()V\n");
        emit("return\n");
        emit(".end method\n");
    }

    private void emit (String s) throws IOException
    {
        if (bFakeMode)
            return;
        for (int i = 0; i < s.length(); i++)
            osCur.write(s.charAt(i));
    }

    private void emitln (String s) throws IOException
    {
        if (bFakeMode)
            return;
        emit (s);
        osCur.write('\n');
    }

    public Object reserveLabel()
    {
        if (bFakeMode)
            return null;

        return "label" + nextLabel++;
    }

    public void markLabel(Object label) throws IOException
    {
        if (bFakeMode)
            return;
        
        emitln ((String)label + ":");
    }

    public void setLocal(MethodContainer method, FieldContainer field) throws IOException
    {
        Type type = field.type;
        if (type.equals(Type.TYPE_BOOL) || type.equals(Type.TYPE_BYTE) ||
                type.equals(Type.TYPE_CHAR) || type.equals(Type.TYPE_SHORT) ||
                type.equals(Type.TYPE_INT))
        {
            emitln ("istore " + field.num);
        }
        else if (type.equals(Type.TYPE_LONG))
        {
            emitln ("lstore " + field.num);
        }
        else if (type.equals(Type.TYPE_FLOAT))
        {
            emitln ("fstore " + field.num);
        }
        else if (type.equals(Type.TYPE_DOUBLE))
        {
            emitln ("dstore " + field.num);
        }
        else if (type.equals(Type.TYPE_CALLBACK))
        {
            emitln ("istore " + field.num);
        }
        else
        {
            emitln ("astore " + field.num);
        }
    }

    public void setGlobal(FieldContainer field) throws IOException
    {
        emit ("putfield " + className + "/" + field.name + " ");
        emitln (Type.genSpec(field.type));
    }

    public void getLocal(MethodContainer method, FieldContainer field) throws IOException
    {
        Type type = field.type;
        if (type.equals(Type.TYPE_BOOL) || type.equals(Type.TYPE_BYTE) ||
                type.equals(Type.TYPE_CHAR) || type.equals(Type.TYPE_SHORT) ||
                type.equals(Type.TYPE_INT))
        {
            emitln ("iload " + field.num);
        }
        else if (type.equals(Type.TYPE_LONG))
        {
            emitln ("lload " + field.num);
        }
        else if (type.equals(Type.TYPE_FLOAT))
        {
            emitln ("fload " + field.num);
        }
        else if (type.equals(Type.TYPE_DOUBLE))
        {
            emitln ("dload " + field.num);
        }
        else if (type.equals(Type.TYPE_CALLBACK))
        {
            emitln ("iload " + field.num);
        }
        else
        {
            emitln ("aload " + field.num);
        }
    }

    public void getGlobal(FieldContainer field) throws IOException
    {
        emitln ("aload_0");
        emit ("getfield " + className + "/" + field.name + " ");
        emitln (Type.genSpec(field.type));
    }

    public void setMember(ClassContainer cont, FieldContainer field)
    {
        throw new RuntimeException("Not supported yet.");
    }

    public void getMember(ClassContainer cont, FieldContainer field) {
        throw new RuntimeException("Not supported yet.");
    }

    public void call(MethodContainer method) throws IOException
    {
        if (method.libHost == null)
        {
            emit ("invokevirtual " + className + "/");
            emitln (method.fullSpec);
        }
        else
        {
            emitln ("invokevirtual " + method.libHost.getDesc() + "/" + method.fullSpec);
        }
    }

    public void callMember(ClassContainer cont, MethodContainer method) throws IOException
    {
        if (method.name.equals("<init>"))
            emitln ("invokespecial " + cont.className + "/" + method.fullSpec);
        else
            emitln ("invokevirtual " + cont.className + "/" + method.fullSpec);
    }

    public void newArray(Type type) throws IOException
    {
        if (type.kind == Type.K_OBJECT)
            emitln ("anewarray " + Type.genSpec(type));
        else
        {
            emit ("newarray ");
            if (type.equals(Type.TYPE_BOOL))
                emitln ("boolean");
            else if(type.equals(Type.TYPE_BYTE))
                emitln ("byte");
            else if(type.equals(Type.TYPE_CHAR))
                emitln ("char");
            else if (type.equals(Type.TYPE_DOUBLE))
                emitln ("double");
            else if (type.equals(Type.TYPE_FLOAT))
                emitln ("float");
            else if (type.equals(Type.TYPE_INT))
                emitln ("int");
            else if (type.equals(Type.TYPE_LONG))
                emitln ("long");
            else if (type.equals(Type.TYPE_SHORT))
                emitln ("short");
        }
    }

    public void multianewArray (Type type, int nDims) throws IOException
    {
        emitln ("multianewarray " + Type.genSpec(type) + " " + nDims);
    }

    public void arraylen() throws IOException
    {
        emitln ("arraylength");
    }

    public void iaload() throws IOException
    {
        emitln ("iaload");
    }

    public void iastore() throws IOException
    {
        emitln ("iastore");
    }

    public void saload() throws IOException
    {
        emitln ("saload");
    }

    public void sastore() throws IOException
    {
        emitln ("sastore");
    }

    public void caload() throws IOException
    {
        emitln ("caload");
    }

    public void castore() throws IOException
    {
        emitln ("castore");
    }

    public void laload() throws IOException
    {
        emitln ("laload");
    }

    public void lastore() throws IOException
    {
        emitln ("lastore");
    }

    public void baload() throws IOException
    {
        emitln ("baload");
    }

    public void bastore() throws IOException
    {
        emitln ("bastore");
    }

    public void aaload() throws IOException
    {
        emitln ("aaload");
    }

    public void aastore() throws IOException
    {
        emitln ("aastore");
    }

    public void faload() throws IOException
    {
        emitln ("faload");
    }

    public void fastore() throws IOException
    {
        emitln ("fastore");
    }

    public void daload() throws IOException
    {
        emitln ("daload");
    }

    public void dastore() throws IOException
    {
        emitln ("dastore");
    }

    public void dup() throws IOException
    {
        emitln ("dup");
    }

    public void dup_x1() throws IOException
    {
        emitln ("dup_x1");
    }


    public void dup2() throws IOException
    {
        emitln ("dup2");
    }

    public void dup2_x1() throws IOException
    {
        emitln ("dup2_x1");
    }

    public void dup_x2() throws IOException
    {
        emitln ("dup_x2");
    }

    public void dup2_x2() throws IOException
    {
        emitln ("dup2_x2");
    }

    public void pushLong(long val) throws IOException
    {
        emitln ("ldc " + val);
    }

    public void pushInt(int val) throws IOException
    {
        if (val >= 0 && val <= 5)
            emitln ("iconst_" + val);
        else if(val >= Byte.MIN_VALUE && val <= Byte.MAX_VALUE)
            emitln ("bipush " + val);
        else if (val >= Short.MIN_VALUE && val <= Short.MAX_VALUE)
            emitln ("sipush " + val);
        else
            emitln ("ldc " + val);
    }

    public void pushString(String val) throws IOException
    {
        String s = "";
        for (int i = 0; i < val.length(); i++)
        {
            if (val.charAt(i) == '\n')
                s += "\\n";
            else if (val.charAt(i) == '\r')
                s += "\\r";
            else if (val.charAt(i) == '\t')
                s += "\\t";
            else
                s += val.charAt(i);
        }
        emitln ("ldc \"" + s + "\"");
    }

    public void pushFloat(float val) throws IOException
    {
        emitln ("ldc " + val);
    }

    public void pushDouble(double val) throws IOException
    {
        emitln ("ldc " + val);
    }

    public void pushNull() throws IOException
    {
        emitln ("aconst_null");
    }

    public void pop() throws IOException
    {
        emitln ("pop");
    }

    public void pop2() throws IOException
    {
        emitln ("pop2");
    }

    public void jmp(Object label) throws IOException
    {
        emitln ("goto " + (String)label);
    }

    public void ifeq(Object label) throws IOException
    {
        emitln ("ifeq " + (String)label);
    }

    public void ifne(Object label) throws IOException
    {
        emitln ("ifne " + (String)label);
    }

    public void iflt(Object label) throws IOException
    {
        emitln ("iflt " + (String)label);
    }

    public void ifle(Object label) throws IOException
    {
        emitln ("ifle " + (String)label);
    }

    public void ifgt(Object label) throws IOException
    {
        emitln ("ifgt " + (String)label);
    }

    public void ifge(Object label) throws IOException
    {
        emitln ("ifge " + (String)label);
    }

    public void iand() throws IOException
    {
        emitln ("iand");
    }

    public void ior() throws IOException
    {
        emitln ("ior");
    }

    public void ixor() throws IOException
    {
        emitln ("ixor");
    }

    public void land() throws IOException
    {
        emitln ("land");
    }

    public void lor() throws IOException
    {
        emitln ("lor");
    }

    public void lxor() throws IOException
    {
        emitln ("lxor");
    }

    public void ieq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        isub ();
        ifne (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void leq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("lcmp");
        ifne (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void aeq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("if_acmpne " + (String)labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void seq() throws IOException
    {
        ieq ();
    }

    public void deq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("dcmpl");
        ifne (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void feq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("fcmpl");
        ifne (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void igreater() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        isub ();
        ifle (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void iless() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        isub ();
        ifge (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void igeq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        isub ();
        iflt (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void ileq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        isub ();
        ifgt (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void lgreater() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("lcmp");
        ifle (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void lless() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("lcmp");
        ifge (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void lgeq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("lcmp");
        iflt (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void lleq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("lcmp");
        ifgt (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void fgreater() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("fcmpl");
        ifle (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void fless() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("fcmpl");
        ifge (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void fgeq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("fcmpl");
        iflt (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void fleq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("fcmpl");
        ifgt (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void dgreater() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("dcmpl");
        ifle (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void dless() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("dcmpl");
        ifge (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void dgeq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("dcmpl");
        iflt (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void dleq() throws IOException
    {
        Object labF = reserveLabel ();
        Object labEnd = reserveLabel ();
        emitln ("dcmpl");
        ifgt (labF);
        pushInt (1);
        jmp (labEnd);
        markLabel (labF);
        pushInt (0);
        markLabel (labEnd);
    }

    public void ishl() throws IOException
    {
        emitln ("ishl");
    }

    public void ishr() throws IOException
    {
        emitln ("ishr");
    }

    public void iushr() throws IOException
    {
        emitln ("iushr");
    }

    public void lshl() throws IOException
    {
        emitln ("lshl");
    }

    public void lshr() throws IOException
    {
        emitln ("lshr");
    }

    public void lushr() throws IOException
    {
        emitln ("lushr");
    }

    public void iadd() throws IOException
    {
        emitln ("iadd");
    }

    public void isub() throws IOException
    {
        emitln ("isub");
    }

    public void idiv() throws IOException
    {
        emitln ("idiv");
    }

    public void imul() throws IOException
    {
        emitln ("imul");
    }

    public void irem() throws IOException
    {
        emitln ("irem");
    }

    public void ladd() throws IOException
    {
        emitln ("ladd");
    }

    public void lsub() throws IOException
    {
        emitln ("lsub");
    }

    public void ldiv() throws IOException
    {
        emitln ("ldiv");
    }

    public void lmul() throws IOException
    {
        emitln ("lmul");
    }

    public void lrem() throws IOException
    {
        emitln ("lrem");
    }

    public void fadd() throws IOException
    {
        emitln ("fadd");
    }

    public void fsub() throws IOException
    {
        emitln ("fsub");
    }

    public void fdiv() throws IOException
    {
        emitln ("fdiv");
    }

    public void fmul() throws IOException
    {
        emitln ("fmul");
    }

    public void dadd() throws IOException
    {
        emitln ("dadd");
    }

    public void dsub() throws IOException
    {
        emitln ("dsub");
    }

    public void ddiv() throws IOException
    {
        emitln ("ddiv");
    }

    public void dmul() throws IOException
    {
        emitln ("dmul");
    }

    public void i2l() throws IOException
    {
        emitln ("i2l");
    }

    public void l2i() throws IOException
    {
        emitln ("l2i");
    }

    public void f2d() throws IOException
    {
        emitln ("f2d");
    }

    public void d2i() throws IOException
    {
        emitln ("d2i");
    }

    public void intToStr() throws IOException
    {
        emitln ("invokestatic java/lang/String/valueOf(I)Ljava/lang/String;");
    }

    public void longToStr() throws IOException
    {
        emitln ("invokestatic java/lang/String/valueof(J)Ljava/lang/String;");
    }

    public void floatToStr() throws IOException
    {
        emitln ("invokestatic java/lang/String/valueof(F)Ljava/lang/String;");
    }

    public void doubleToStr() throws IOException
    {
        emitln ("invokestatic java/lang/String/valueof(D)Ljava/lang/String;");
    }

    public void charToStr() throws IOException
    {
        emitln ("invokestatic java/lang/String/valueof(C)Ljava/lang/String;");
    }

    public void concatStr() throws IOException
    {
        //emitln ("swap");
        emitln ("invokevirtual java/lang/String/concat(Ljava/lang/String;)Ljava/lang/String;");
    }

    public void ineg() throws IOException
    {
        emitln ("ineg");
    }

    public void lneg() throws IOException
    {
        emitln ("lneg");
    }

    public void fneg() throws IOException
    {
        emitln ("fneg");
    }

    public void dneg() throws IOException
    {
        emitln ("dneg");
    }

    public void iinc() throws IOException
    {
        pushInt (1);
        emitln ("iadd");
    }

    public void linc() throws IOException
    {
        pushLong (1);
        emitln ("ladd");
    }

    public void instance_of(Type type) throws IOException
    {
        emitln ("instanceof " + Type.genSpec(type));
    }

    public void retVoid() throws IOException
    {
        emitln ("return");
    }

    public void ret(Type type) throws IOException
    {
        if (type.equals(Type.TYPE_BOOL) || type.equals(Type.TYPE_BYTE) ||
                type.equals(Type.TYPE_CHAR) || type.equals(Type.TYPE_SHORT) ||
                type.equals(Type.TYPE_INT))
        {
            emitln ("ireturn");
        }
        else if (type.equals(Type.TYPE_LONG))
        {
            emitln ("lreturn");
        }
        else if (type.equals(Type.TYPE_FLOAT))
        {
            emitln ("freturn");
        }
        else if (type.equals(Type.TYPE_DOUBLE))
        {
            emitln ("dreturn");
        }
        else
        {
            emitln ("areturn");
        }
    }

    public void loadThis() throws IOException
    {
        emitln ("aload_0");
    }

    public void swap() throws IOException
    {
        emitln ("swap");
    }

    public void i2b() throws IOException
    {
        emitln ("i2b");
    }

    public void i2c() throws IOException
    {
        emitln ("i2c");
    }

    public void i2s() throws IOException
    {
        emitln ("i2s");
    }

    public void i2f() throws IOException
    {
        emitln ("i2f");
    }

    public void i2d() throws IOException
    {
        emitln ("i2d");
    }

    public void l2f() throws IOException
    {
        emitln ("l2f");
    }

    public void l2d() throws IOException
    {
        emitln ("l2d");
    }

    public void f2i() throws IOException
    {
        emitln ("f2i");
    }

    public void f2l() throws IOException
    {
        emitln ("f2l");
    }

    public void d2f() throws IOException
    {
        emitln ("d2f");
    }

    public void d2l() throws IOException
    {
        emitln ("d2l");
    }

    public void nop() throws IOException
    {
        emitln ("nop");
    }

    public void fakeModeOn()
    {
        vFakeModeStack.addElement(new Boolean(bFakeMode));
        bFakeMode = true;
    }

    public void fakeModeOff()
    {
        bFakeMode = ((Boolean)vFakeModeStack.elementAt(vFakeModeStack.size()-1)).booleanValue();
        vFakeModeStack.removeElementAt(vFakeModeStack.size()-1);
    }

    public void loadLibraryInstance(Library library) throws IOException
    {
        emitln ("aload_0");
        emitln ("invokestatic " + library.getDesc() + "/getSingleton(Ljcc2/lib/RTCallbackCaller;)" + "L" + library.getDesc() + ";");
    }

    public void strToByteArray() throws IOException
    {
        emitln ("invokevirual java/lang/String/getBytes()[b");
    }

    public void strSubStr1() throws IOException
    {
        emitln ("invokevirual java/lang/String/substring(I)Ljava/lang/String;");
    }

    public void strSubStr2() throws IOException
    {
        emitln ("invokevirual java/lang/String/substring(II)Ljava/lang/String;");
    }

    public void strCharAt() throws IOException
    {
        emitln ("invokevirual java/lang/String/charAt(I)C");
    }

    public void strIndexOf1() throws IOException
    {
        emitln ("invokevirual java/lang/String/indexOf(I)I");
    }

    public void strIndexOf2() throws IOException
    {
        emitln ("invokevirual java/lang/String/indexOf(II)I");
    }

    public void strIndexOf3() throws IOException
    {
        emitln ("invokevirual java/lang/String/indexOf(Ljava/lang/String;)I");
    }

    public void strIndexOf4() throws IOException
    {
        emitln ("invokevirual java/lang/String/indexOf(Ljava/lang/String;I)I");
    }

    public void strLastIndexOf1() throws IOException
    {
        emitln ("invokevirual java/lang/String/lastIndexOf(I)I");
    }

    public void strLastIndexOf2() throws IOException
    {
        emitln ("invokevirual java/lang/String/lastIndexOf(II)I");
    }

    public void strLastIndexOf3() throws IOException
    {
        emitln ("invokevirual java/lang/String/lastIndexOf(Ljava/lang/String;)I");
    }

    public void strLastIndexOf4() throws IOException
    {
        emitln ("invokevirual java/lang/String/lastIndexOf(Ljava/lang/String;I)I");
    }

    public void strLength() throws IOException
    {
        emitln ("invokevirual java/lang/String/length()I");
    }

    public void strReplace() throws IOException
    {
        emitln ("invokevirual java/lang/String/replace(CC)Ljava/lang/String;");
    }

    public void strStartsWith() throws IOException
    {
        emitln ("invokevirual java/lang/String/startsWith(Ljava/lang/String;)B");
    }

    public void strEndsWith() throws IOException
    {
        emitln ("invokevirual java/lang/String/endsWith(Ljava/lang/String;)B");
    }

    public void strTrim() throws IOException
    {
        emitln ("invokevirual java/lang/String/trim()Ljava/lang/String;");
    }

    public void strFromByteArray() throws IOException
    {
        emitln ("new java/lang/String");
        emitln ("dup_x1");
        emitln ("invokenonvirtual java/lang/String/<init>([B)V");
    }

    public void objectEquals() throws IOException
    {
        emitln ("invokevirual java/lang/Object/equals(Ljava/lang/Object;)B");
    }

    public void callCallback() throws IOException
    {
        emitln ("invokevirtual " + className + "/$callCallback([Ljava/lang/Object;I)V");
    }

    public void newObject(ClassContainer classContainer) throws IOException
    {
        emitln ("new " + classContainer.className);
    }

    public void callConstructor(ClassContainer classContainer, MethodContainer method) throws IOException
    {
        emitln ("invokespecial " + classContainer.className + "/" + method.fullSpec);
    }

    public void strToInt() throws IOException
    {
        emitln ("invokestatic java/lang/Integer/parseInt(Ljava/lang/String;)I");
    }

    public void strToFloat() throws IOException
    {
        emitln ("invokestatic java/lang/Integer/parseFloat(Ljava/lang/String;)F");
    }
}
